<sheetreader>
	<outFormat>
		<mysql>
			<code>
				<![CDATA[
				INSERT INTO responses (response_code,date,sheet_code,candidate_code,fax_number,receiver_number,sheet_image, need_check) VALUES('#CANDIDATE##SHEET##DATE#','#DATE#','#SHEET#','#CANDIDATE#','#SENDER#','#RECEIVER#','#SHEETIMAGE#',#NEEDCHECK#);
				#PROPERTIES#
				]]>
			</code>
			<propertyCode>
				<![CDATA[
				INSERT INTO response_properties (response_code, ocr_name, ocr_value, ocr_image) VALUES('#CANDIDATE##SHEET##DATE#','#OCRNAME#','#OCRVALUE#','#OCRIMAGE#');
				]]>
			</propertyCode>
		</mysql>
		<rails>
			<code>
				<![CDATA[#!/usr/bin/ruby
				# -*- encoding: utf-8 -*-
				require "rubygems"
				require "active_record"
				require "yaml"
				require "erb"
				rails_prefix = ARGV[0] || "./"
				image_prefix = ARGV[1] || "./"
				echo_prefix = ARGV[2] || "./"
				config_db = rails_prefix + "/config/database.yml"
				db_env = ENV['RAILS_ENV'] || ENV['RACK_ENV'] || "development"
				ActiveRecord::Base.configurations = YAML.load(ERB.new(Pathname.new(config_db).read).result)
				ActiveRecord::Base.establish_connection(db_env)
				Dir.glob(rails_prefix + '/app/models/*.rb').each do |model|
				  load model
				end
				answer_sheet = AnswerSheet.new
				answer_sheet.date = "#DATE#"
				answer_sheet.srerror = "#RESULT#"
				sheet_object = Sheet.find_by_sheet_code("#SHEET#")
				answer_sheet.sheet_id = sheet_object ? sheet_object.id : 1
				candidate_object = Candidate.find_by_candidate_code("#CANDIDATE#")
				answer_sheet.candidate_id = candidate_object ? candidate_object.id : 1
				answer_sheet.analyzed_sheet_code = "#SHEET#"
				answer_sheet.analyzed_candidate_code = "#CANDIDATE#"
				answer_sheet.sender_number = "#SENDER#"
				answer_sheet.receiver_number = "#RECEIVER#"
				answer_sheet.sheet_image = '#SHEETIMAGE#'
				answer_sheet.need_check = #NEEDCHECK#
				props = []
				#PROPERTIES#
				echo_request = 0
				props.each do |prop|
				  if prop[0] == "echo_request_and_send_analyzed_data" && prop[1] == "×"
				  echo_request = 1
				  end
				end
				if echo_request == 0
					props.each do |prop|
					  if prop[0] != "echo_request_and_send_analyzed_data"
					    answer_sheet_property = AnswerSheetProperty.new
					    answer_sheet_property.ocr_name = prop[0]
					    answer_sheet_property.ocr_value = prop[1]
					    answer_sheet_property.ocr_image = prop[2]
					    answer_sheet.answer_sheet_properties << answer_sheet_property
					  end
					end
					answer_sheet.save
					exit(0)
				else
					sheet_object = Sheet.find_by_sheet_code("#SHEET#")
					survey_object = Survey.find_by_id(sheet_object.survey_id)
					f = File.new("#{echo_prefix}.html", 'w')
					f.write "<html><body><h1>シート入力テスト</h1>\n"
					f.write "<table width=\"800\" border=1>\n"
					f.write "<tr><th colspan=3 bgcolor=\"#aaaaaa\">シート情報</th></tr>\n"
					f.write "<tr><th>調査対象コード</th><td colspan=2>#{answer_sheet.analyzed_candidate_code}</td></tr>\n"
					f.write "<tr><th>シートコード</th><td colspan=2>#{answer_sheet.analyzed_sheet_code}</td></tr>\n"
					f.write "<tr><th>調査</th><td colspan=2>#{survey_object.survey_name}</td></tr>\n"
					f.write "<tr><th>シート</th><td colspan=2>#{sheet_object.sheet_name}</td></tr>\n"
					f.write "<tr bgcolor=\"#aaaaaa\">\n"
					f.write "<th bgcolor=\"#aaaaaa\">項目</th>\n"
					f.write "<th bgcolor=\"#aaaaaa\">OCR読み取り値</th>\n"
					f.write "<th bgcolor=\"#aaaaaa\">画像</th>\n"
					f.write "</tr>\n"
					props.each do |prop|
						f.write "<tr>\n"
						survey_property_object = SurveyProperty.find_by_survey_id_and_ocr_name(survey_object.id, prop[0])
						if survey_property_object != nil
							f.write "<td>#{survey_property_object.ocr_name_full}</td>\n"
							f.write "<td>#{prop[1]}</td>\n"
							f.write "<td><img height=\"30\" src=#{image_prefix}#{prop[2]}></td>\n"
						end
						f.write "</tr>\n"
					end
					f.write "<tr><th colspan=3 bgcolor=\"#aaaaaa\">シート</th></tr>\n"
					f.write "<tr><td colspan=3><img width=\"500\" src=\"#{image_prefix}#SHEETIMAGE#\"></td></tr>\n"
					f.write "</table></body></html>\n"
					f.close
					system("wkhtmltopdf --quiet --page-size A4 --encoding utf-8 #{echo_prefix}.html #{echo_prefix}.pdf")
					exit(8)
				end
				]]>
			</code>
			<propertyCode>
				<![CDATA[
				props << ['#OCRNAME#','#OCRVALUE#','#OCRIMAGE#']
				]]>
			</propertyCode>
		</rails>
	</outFormat>
</sheetreader>
